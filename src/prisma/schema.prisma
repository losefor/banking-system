generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
  output   = "./generated-erd.svg"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Bank {
  id String @id @default(uuid())

  name String
  User User[]
}

enum AccountType {
  CURRENT
  SAVING
}

model Account {
  id String @id @default(uuid())

  balance     Float
  accountType AccountType @map("account_type")

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id])

  pemdingFromTransactions   PendingTransaction[]   @relation("PedningFromAccount")
  pemdingToTransactions     PendingTransaction[]   @relation("PedningToAccount")
  confirmedFromTransactions ConfirmedTransaction[] @relation("ConfirmedFromAccount")
  confirmedToTransactions   ConfirmedTransaction[] @relation("ConfirmedToAccount")
}

enum TransactionType {
  WITHDRAWAL
  DEPOSIT
}

model PendingTransaction {
  id String @id @default(uuid())

  amount Float
  type   TransactionType

  fromAccountId String
  fromAccount   Account @relation("PedningFromAccount", fields: [fromAccountId], references: [id])

  toAccountId String
  toAccount   Account @relation("PedningToAccount", fields: [toAccountId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
}

model ConfirmedTransaction {
  id String @id @default(uuid())

  amount Float
  type   TransactionType

  fromAccountId String  @map("from_account_id")
  fromAccount   Account @relation("ConfirmedFromAccount", fields: [fromAccountId], references: [id])

  toAccountId String   @map("to_account_id")
  toAccount   Account  @relation("ConfirmedToAccount", fields: [toAccountId], references: [id])
  createdAt   DateTime @default(now()) @map("created_at")
}

model User {
  id String @id @default(uuid())

  // Local auth 
  username String? @unique
  password String?

  fullName String
  email    String? @unique
  address  String

  permission   Permission @relation(fields: [permissionId], references: [id])
  permissionId String     @map("permission_id")

  bank   Bank?   @relation(fields: [bankId], references: [id])
  bankId String?

  // Statisticle fields
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @map("updated_at")
  images    Image[]
  accounts  Account[]

  @@map("users")
}

model Permission {
  id String @id @default(uuid())

  name   Translation @relation(fields: [nameId], references: [id])
  nameId String      @map("name_id")

  uniqueName String @unique @map("unique_name") // unique name for the permisson 

  // Statisticle fields
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @map("updated_at")

  // Models you want to control its permissions
  Image    String @default("")
  Account  String @default("")
  Bank     String @default("")
  Customer String @default("")
  Manager  String @default("")

  users User[] @relation()

  @@map("permissions")
}

model Image {
  id       String @id @default(uuid())
  filename String
  url      String

  isUsed Boolean @default(false) @map("is_used")

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  // Metadata
  width       Int?
  hight       Int?
  sizeInBytes Int? @map("size_in_bytes")

  // Statisticle fields
  createdAt DateTime @default(now()) @map("created_at")

  @@map("images")
}

model Translation {
  id String @id @default(uuid())

  ar  String?
  en  String?
  ckb String?

  permissions Permission[]

  @@map("translations")
}
